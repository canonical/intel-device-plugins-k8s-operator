job_queue: dell-precision-3470-c30322
provision_data:
  distro: jammy
  user_data: |
    #cloud-config
    # Note, much of this is borrowed from the
    # charm-dev multipass template:
    # https://github.com/canonical/multipass-blueprints/blob/main/v1/charm-dev.yaml
    package_update: true
    package_upgrade: true
    package_reboot_if_required: true

    packages:
    - python3-pip

    snap:
      commands:
      # Juju 3.5 is supported until Jan 2025
      # https://juju.is/docs/juju/roadmap
      - snap install juju --channel=3.5/stable
      - snap install microk8s --channel=1.29-strict/stable
      - snap install --classic charmcraft
      - snap refresh

    runcmd:
    - |
      # Clone source from the appropriate branch/commit
      sudo -u ubuntu git clone \
        -b ${{ github.head_ref || github.ref_name }} \
        https://github.com/canonical/intel-device-plugins-k8s-operator.git \
        ~ubuntu/intel-device-plugins-k8s-operator

    - |
      # Install tox from pypi (v4) instead of apt (v3)
      pip3 install tox

    - |
      # Make sure juju directory is there
      # https://bugs.launchpad.net/juju/+bug/1995697
      sudo -u ubuntu mkdir -p /home/ubuntu/.local/share/juju

    - |
      # setup lxd for charmcraft
      lxd init --auto
      adduser ubuntu lxd

    - |
      # setup microk8s and bootstrap
      usermod -a -G snap_microk8s ubuntu
      usermod -a -G microk8s ubuntu
      microk8s status --wait-ready
      # wait for storage to become available
      microk8s.enable hostpath-storage
      microk8s.kubectl rollout status \
        deployments/hostpath-provisioner \
        -n kube-system -w --timeout=600s
      sudo -u ubuntu juju bootstrap microk8s microk8s
      sudo -u ubuntu juju add-model \
        --config logging-config="<root>=WARNING; unit=DEBUG" \
        --config update-status-hook-interval="1m" \
        welcome-k8s
test_data:
  test_cmds: |

    # Exit immediately if a test fails
    set -e

    # Test 1: Verify that microk8s is installed
    ssh $DEVICE_IP '
      ~ubuntu/intel-device-plugins-k8s-operator/.github/testflinger/test-cmd-with-timeout.sh \
        command -v microk8s
    '

    # Test 2: Verify that juju is installed
    ssh $DEVICE_IP '
      ~ubuntu/intel-device-plugins-k8s-operator/.github/testflinger/test-cmd-with-timeout.sh \
        command -v juju
    '

    # Test 3: Verify that juju microk8s model is deployed
    ssh $DEVICE_IP '
      ~ubuntu/intel-device-plugins-k8s-operator/.github/testflinger/test-cmd-with-timeout.sh \
        juju status -m welcome-k8s
    '

    # Test 4: Verify that microk8s controller pod is ready
    ssh $DEVICE_IP '
      microk8s.kubectl -n controller-microk8s wait --for=condition=Ready pod/controller-0 --timeout=1200s
    '

    # Test 5: For debugging, show current git branch and latest commit
    #         Note this branch is cloned from the runcmd cloud-init section and placing
    #         the test here ensures that the clone command has been run as the previous
    #         test will only complete successfully once the runcmd section has completed.
    ssh $DEVICE_IP '
      cd ~ubuntu/intel-device-plugins-k8s-operator
      echo "Current git branch: $(git branch --show-current)"
      echo "Latest commit:"
      git log --name-status HEAD^..HEAD
    '

    # Test 6: Run charm integration tests with tox
    ssh $DEVICE_IP '
      tox -e integration --conf ~ubuntu/intel-device-plugins-k8s-operator/tox.ini
    '
